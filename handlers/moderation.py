import logging
from aiogram import Router, types, F
from aiogram.filters import Command, CommandObject
from aiogram.utils.keyboard import InlineKeyboardBuilder
from filters import ProfanityFilter
from utils.db import log_action, get_chat_stats
from aiogram.enums import UpdateType

router = Router()
logger = logging.getLogger(__name__)

HELLO_TEXT = (
    "üõ† –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞\n\n"
    "üìé –ö–æ–º–∞–Ω–¥—ã:\n"
    "/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞  \n"
    "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ  \n"
    "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∞—Ç—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)  \n"
    "/rules ‚Äî –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞  \n"
    "---\n\n"
    "üîç –§—É–Ω–∫—Ü–∏–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:\n"
    "- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –ª–µ–∫—Å–∏–∫–æ–π  \n"
    "- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ø–∞–º–∞ –∏ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫  \n"
    "- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö  \n"
    "---\n\n"
    "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞:\n"
    "1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É  \n"
    "2. –î–∞–π—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞  \n"
    "3. –í–∫–ª—é—á–∏—Ç–µ –ø—Ä–∞–≤–æ \"–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\"\n\n"
    "---\n\n"
    "üìä –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:\n"
    "–í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –±–æ—Ç–∞ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ –ª–æ–≥–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
)

RULES_TEXT = (
    "<b>–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞:</b>\n"
    "1. –ó–∞–ø—Ä–µ—â–µ–Ω–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞ –∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è.\n"
    "2. –ù–µ —Å–ø–∞–º–∏—Ç—å –∏ –Ω–µ —Ä–∞–∑–º–µ—â–∞—Ç—å –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏.\n"
    "3. –°–æ–±–ª—é–¥–∞–π—Ç–µ —É–≤–∞–∂–µ–Ω–∏–µ –∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n"
    "4. –ù–µ –Ω–∞—Ä—É—à–∞–π—Ç–µ –∑–∞–∫–æ–Ω—ã –†–§ –∏ –ø—Ä–∞–≤–∏–ª–∞ Telegram.\n"
    "5. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω."
)

rules_kb = InlineKeyboardBuilder()
rules_kb.button(text="–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞", callback_data="show_rules")
rules_kb = rules_kb.as_markup()

@router.message(Command("start"))
@router.message(Command("help"))
async def cmd_start_help(message: types.Message):
    await message.reply(HELLO_TEXT, reply_markup=rules_kb)
    await log_action(
        user_id=message.from_user.id,
        chat_id=message.chat.id,
        action_type='command',
        action_description='–í—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /start –∏–ª–∏ /help',
        message_text=message.text
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–∑–≤–∞–ª /start –∏–ª–∏ /help.")

@router.message(Command("rules"))
async def cmd_rules(message: types.Message):
    await message.reply(RULES_TEXT, parse_mode="HTML")
    await log_action(
        user_id=message.from_user.id,
        chat_id=message.chat.id,
        action_type='command',
        action_description='–ó–∞–ø—Ä–æ—Å –ø—Ä–∞–≤–∏–ª —á–∞—Ç–∞',
        message_text=message.text
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª /rules.")

@router.callback_query(F.data == "show_rules")
async def show_rules_callback(call: types.CallbackQuery):
    await call.message.answer(RULES_TEXT, parse_mode="HTML")
    await call.answer()
    await log_action(
        user_id=call.from_user.id,
        chat_id=call.message.chat.id,
        action_type='callback',
        action_description='–ó–∞–ø—Ä–æ—Å –ø—Ä–∞–≤–∏–ª —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É',
        message_text=None
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–∞–≤–∏–ª–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É.")

@router.message(Command("stats"))
async def cmd_stats(message: types.Message):
    member = await message.chat.get_member(message.from_user.id)
    if member.status in ["creator", "administrator"]:
        try:
            stats = await get_chat_stats(message.chat.id)
            stats_text = (
                "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞</b>\n\n"
                "üìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {stats['total_actions']}\n"
                f"‚Ä¢ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['deleted_messages']}\n"
                f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['unique_users']}\n\n"
                "üëÆ‚Äç‚ôÇÔ∏è –ë–æ—Ç –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≤–µ–¥—ë—Ç –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π."
            )
            await message.reply(stats_text, parse_mode="HTML")
            await log_action(
                user_id=message.from_user.id,
                chat_id=message.chat.id,
                action_type='command',
                action_description='–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∞–¥–º–∏–Ω)',
                message_text=message.text
            )
            logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª /stats.")
        except Exception as e:
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    else:
        await message.reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
        await log_action(
            user_id=message.from_user.id,
            chat_id=message.chat.id,
            action_type='command',
            action_description='–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∑ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞',
            message_text=message.text
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å /stats –±–µ–∑ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞.")

@router.message(ProfanityFilter())
async def profanity_handler(message: types.Message):
    try:
        await message.delete()
        warning_text = f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username or message.from_user.first_name}, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ."
        await message.answer(warning_text, parse_mode="HTML")
        await log_action(
            user_id=message.from_user.id,
            chat_id=message.chat.id,
            action_type='profanity_filter',
            action_description='–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –ª–µ–∫—Å–∏–∫–æ–π',
            message_text=message.text
        )
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–∞—Ç–æ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

@router.my_chat_member()
async def on_bot_added(event: types.ChatMemberUpdated):
    if event.new_chat_member.status in ("member", "administrator") and event.old_chat_member.status == "left":
        try:
            await event.bot.send_message(event.chat.id, HELLO_TEXT, reply_markup=rules_kb)
            await log_action(
                user_id=event.from_user.id,
                chat_id=event.chat.id,
                action_type='bot_added',
                action_description='–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç',
                message_text=None
            )
            logger.info(f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {event.chat.id}, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {e}")

@router.callback_query()
async def catch_all_callback(call: types.CallbackQuery):
    logger.warning(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π callback_query: {call.data}")
    await call.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞.") 